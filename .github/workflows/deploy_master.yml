name: Test and deploys master

on:
  workflow_run:
    workflows: [Run unit tests]
      push:
        branches:
          - master
        paths:
          - '*/**.py'      # Run on non-root changes on python files
      types:
          - completed

jobs:
  pre-release:
    name: "Pre Release"
    needs:
      - pytest
    runs-on: ubuntu-latest
    steps:
      - name: Create Github release (pre-release)
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "dev-latest"
          prerelease: true
          title: "dev-v${{ env.VERSION }}"
          files: |
            LICENSE
            dist/intrusion*

  pypi:
    name: Deploy to TestPyPI
    needs:
      - pytest
    if: ${{ github.ref == 'refs/heads/master' && !startsWith( github.ref, 'refs/tags/v' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Get version from versioneer
        run: |
          VER=$(echo $(python -c "import versioneer; print(versioneer.get_versions()['version'].replace('+', '-'))"))
          echo "VERSION=$VER" >> $GITHUB_ENV
      - name: Install pypa/build and build a binary wheel and a source tarball
        run: |
          python -m pip install --upgrade pip
          python -m pip install build --user
          python -m build --sdist --wheel --outdir dist/ .
      - name: Publish distribution ðŸ“¦ to TestPyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  docker:
    name: Deploy to Docker Hub (dev-latest)
    needs:
      - pytest
    if: ${{ github.ref == 'refs/heads/master' && !startsWith( github.ref, 'refs/tags/v' ) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Get version from versioneer
        run: |
          echo "${{github.ref}}"
          VER=$(echo $(python -c "import versioneer; print(versioneer.get_versions()['version'].replace('+', '-'))"))
          echo "VERSION=$VER" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          build-args: |
            VERSION=dev-v${{ env.VERSION }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            afonsoc12/intrusion-monitor:dev-latest
            afonsoc12/intrusion-monitor:dev-v${{ env.VERSION }}
            ghcr.io/afonsoc12/intrusion-monitor:dev-latest
            ghcr.io/afonsoc12/intrusion-monitor:dev-v${{ env.VERSION }}

  dummy:
    name: Dummy step
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout
